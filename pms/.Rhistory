geom_line(size=.8)+
geom_hline(yintercept=0, colour='black', linetype='dashed')+
facet_wrap(~variavel, scales='free')+
theme_classic()+
theme(legend.position = 'none')+
labs(x='', y='',
title='Pesquisa Mensal de Serviços',
caption= foot_ibge)
tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10]) %>%
ggplot(aes(x=date, y=valor, colour=variavel))+
geom_line(size=.8)+
geom_hline(yintercept=0, colour='black', linetype='dashed')+
facet_wrap(~variavel, scales='free')+
theme_classic()+
theme(legend.position = 'none')+
labs(x='', y='',
title='Pesquisa Mensal de Serviços',
caption= foot_ibge)
tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10]) %>%
ggplot(aes(x=date, y=valor, colour=variavel))+
geom_line(size=.8)+
geom_hline(yintercept=0, colour='black', linetype='dashed')+
facet_wrap(~variavel, scales='free')+
theme_classic()+
theme(legend.position = 'none')+
labs(x='', y='',
title='Pesquisa Mensal de Serviços',
caption= foot_ibge)
tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10]) %>%
ggplot(aes(x=date, y=valor, colour=variavel))+
geom_line(size=.8)+
geom_hline(yintercept=0, colour='black', linetype='dashed')+
facet_wrap(~variavel, scales='free')+
theme_classic()+
theme(legend.position = 'none')+
labs(x='', y='',
title='Pesquisa Mensal de Serviços',
caption= foot_ibge)
library(DT)
library(plotly)
tab_receita <- tabpms_pe %>%
select(date, margem_receita, interanual_receita,
anual_receita) %>%
tail() %>%
datatable(digits=2,
options = list(
dom = 't',
scrollX = TRUE,
paging = FALSE
),
caption='Pesquisa Mensal de Serviços: Variações da Receita PE')
tab_receita <- tabpms_pe
tab_receita <- tabpms_pe %>%
select(date, margem_receita, interanual_receita,
anual_receita)
tab_receita <- tabpms_pe %>%
select(date, margem_receita, interanual_receita,
anual_receita) %>%
tail() %>%
datatable(digits=2,
options = list(
dom = 't',
scrollX = TRUE,
paging = FALSE
),
caption='Pesquisa Mensal de Serviços: Variações da Receita PE')
tab_receita <- tabpms_pe %>%
select(date, margem_receita, interanual_receita,
anual_receita) %>%
tail() %>%
datatable(
options = list(
dom = 't',
scrollX = TRUE,
paging = FALSE
),
caption='Pesquisa Mensal de Serviços: Variações da Receita PE'
)
cat("### Receita\n")
print(tab_receita)
options(htmltools.dir.version = FALSE)
options(htmltools.preserve.raw = FALSE)
knitr::opts_chunk$set(
echo = FALSE,
warning   = FALSE,  # exibir avisos do console?
message   = FALSE,  # exibir mensagens do console?
dpi       = 300,    # resolução
fig.align = "center"# alinhamento de imagens
)
## Pacotes utilizados nessa apresentação ------------
library(tidyverse)
library(scales)
library(sidrar)
library(knitr)
library(tstools)
library(ggthemes)
library(DT)
library(plotly)
## Função ----------------
acum_i <- function(data, n){
data_ma_n <- RcppRoll::roll_meanr(data, n)
data_lag_n <- dplyr::lag(data_ma_n, n)
data_acum_n = (((data_ma_n/data_lag_n)-1)*100)
return(data_acum_n)
}
names <- c('date', 'receita', 'volume', 'receita_sa', 'volume_sa')
foot_ibge <- "Fonte: ADEPE com dados do IBGE"
## Coleta e Tratamento dos Dados --------------------
tabpms = '/t/5906/n1/all/v/7167,7168/p/all/c11046/all/d/v7167%205,v7168%205' %>%
sidrar::get_sidra(api = .) %>%
mutate(date = parse_date(`Mês (Código)`, format = '%Y%m')) %>%
dplyr::select(date, "Variável", "Tipos de índice", Valor) %>%
pivot_wider(id_cols = date,
names_from = c("Variável", "Tipos de índice"),
values_from = Valor) %>%
`colnames<-`(names) %>%
dplyr::select(date, receita, receita_sa, volume, volume_sa) %>%
as_tibble()
## Criar métricas --------------
tabpms =
tabpms %>%
mutate(margem_receita = (receita_sa/lag(receita_sa,1)-1)*100) %>%
mutate(margem_volume = (volume_sa/lag(volume_sa,1)-1)*100) %>%
mutate(interanual_receita = (receita/lag(receita,12)-1)*100) %>%
mutate(interanual_volume = (volume/lag(volume,12)-1)*100) %>%
mutate(anual_receita = acum_i(receita,12)) %>%
mutate(anual_volume = acum_i(volume,12))
## Wide para long
tabpms_long =
tabpms %>%
gather(variavel, valor, -date)
## Coleta e Tratamento dos Dados ---------------------
tabpms_pe = '/t/5906/n3/26/v/7167,7168/p/all/c11046/all/d/v7167%205,v7168%205' %>%
sidrar::get_sidra(api=.) %>%
mutate(date = parse_date(`Mês (Código)`, format = '%Y%m')) %>%
dplyr::select(date, "Variável", "Tipos de índice", Valor) %>%
pivot_wider(id_cols = date,
names_from = c("Variável", "Tipos de índice"),
values_from = Valor) %>%
`colnames<-`(names) %>%
dplyr::select(date, receita, receita_sa, volume, volume_sa) %>%
as_tibble()
## Criar métricas -------------------
tabpms_pe =
tabpms_pe %>%
mutate(margem_receita = (receita_sa/lag(receita_sa,1)-1)*100) %>%
mutate(margem_volume = (volume_sa/lag(volume_sa,1)-1)*100) %>%
mutate(interanual_receita = (receita/lag(receita,12)-1)*100) %>%
mutate(interanual_volume = (volume/lag(volume,12)-1)*100) %>%
mutate(anual_receita = acum_i(receita,12)) %>%
mutate(anual_volume = acum_i(volume,12))
## Wide para long
tabpms_long =
tabpms_pe %>%
gather(variavel, valor, -date)
library(plotly)
tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10]) %>%
plot_ly(x = ~date, y = ~valor, color = ~variavel, type = "scatter", mode = "lines") %>%
add_hline(yintercept = 0, line = list(color = 'black', dash = 'dash')) %>%
layout(title = 'Pesquisa Mensal de Serviços',
xaxis = list(title = ''),
yaxis = list(title = ''),
legend = list(orientation = "h")) %>%
subplot(facets = ~variavel, shareX = TRUE, shareY = TRUE)
filtered_data <- tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10])
# Criar o gráfico
fig <- filtered_data %>%
plot_ly(x = ~date, y = ~valor, color = ~variavel, type = "scatter", mode = "lines") %>%
layout(title = 'Pesquisa Mensal de Serviços',
xaxis = list(title = ''),
yaxis = list(title = ''),
legend = list(orientation = "h"))
# Adicionar linhas horizontais
for (i in unique(filtered_data$variavel)) {
fig <- fig %>% add_hline(y = 0, line = list(color = "black", dash = "dash"), row = i)
}
library(plotly)
# Criar o gráfico
fig <- filtered_data %>%
plot_ly(x = ~date, y = ~valor, color = ~variavel, type = "scatter", mode = "lines") %>%
layout(title = 'Pesquisa Mensal de Serviços',
xaxis = list(title = ''),
yaxis = list(title = ''),
legend = list(orientation = "h"))
# Determinar os limites do eixo y
y_limits <- range(filtered_data$valor)
# Adicionar retas horizontais
for (i in unique(filtered_data$variavel)) {
fig <- fig %>%
add_trace(x = c(min(filtered_data$date), max(filtered_data$date)),
y = c(0, 0),
type = "scatter",
mode = "lines",
line = list(color = "black", dash = "dash"),
row = i) %>%
layout(shapes = list(
type = "line",
x0 = min(filtered_data$date),
x1 = max(filtered_data$date),
y0 = 0,
y1 = 0,
line = list(color = "black", dash = "dash"),
xref = paste0("x", i),
yref = paste0("y", i)
))
}
# Exibir o gráfico
fig
library(plotly)
# Criar o gráfico
fig <- plot_ly() %>%
add_trace(data = filtered_data, x = ~date, y = ~valor, color = ~variavel, type = "scatter", mode = "lines") %>%
layout(title = 'Pesquisa Mensal de Serviços',
xaxis = list(title = ''),
yaxis = list(title = ''),
legend = list(orientation = "h"))
# Determinar os limites do eixo y
y_limits <- range(filtered_data$valor)
# Adicionar retas horizontais
for (i in unique(filtered_data$variavel)) {
fig <- fig %>%
add_shape(type = "line",
x0 = min(filtered_data$date),
x1 = max(filtered_data$date),
y0 = 0,
y1 = 0,
line = list(color = "black", width = 1, dash = "dash"),
xref = paste0("x", i),
yref = paste0("y", i))
}
library(plotly)
library(dplyr)
# Carregar os dados
data(tabpms_long)
# Filtrar os dados
filtered_data <- tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10])
# Criar o gráfico
fig <- plot_ly() %>%
add_trace(data = filtered_data, x = ~date, y = ~valor, color = ~variavel, type = "scatter", mode = "lines") %>%
layout(title = 'Pesquisa Mensal de Serviços',
xaxis = list(title = ''),
yaxis = list(title = ''),
legend = list(orientation = "h"))
# Determinar os limites do eixo y
y_limits <- range(filtered_data$valor)
# Adicionar retas horizontais
for (i in unique(filtered_data$variavel)) {
fig <- fig %>%
add_shape(type = "line",
x0 = min(filtered_data$date),
x1 = max(filtered_data$date),
y0 = 0,
y1 = 0,
line = list(color = "black", width = 1, dash = "dash"),
xref = paste0("x", i),
yref = paste0("y", i))
}
tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10]) %>%
ggplot(aes(x=date, y=valor, colour=variavel))+
geom_line(size=.8)+
geom_hline(yintercept=0, colour='black', linetype='dashed')+
facet_wrap(~variavel, scales='free')+
theme_classic()+
theme(legend.position = 'none')+
labs(x='', y='',
title='Pesquisa Mensal de Serviços',
caption= foot_ibge)
# Criar o gráfico dinâmico com Plotly
fig <- plot_ly(filtered_data, x = ~date, y = ~valor, color = ~variavel, type = "scatter", mode = "lines") %>%
add_hline(y = 0, line = list(color = "black", dash = "dash")) %>%
layout(title = 'Pesquisa Mensal de Serviços',
xaxis = list(title = ''),
yaxis = list(title = ''),
legend = list(orientation = "h")) %>%
subplot(facets = ~variavel, shareX = TRUE, shareY = TRUE)
library(plotly)
library(dplyr)
# Filtrar e preparar os dados
filtered_data <- tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10])
# Criar o gráfico dinâmico com Plotly
fig <- plot_ly(filtered_data, x = ~date, y = ~valor, color = ~variavel, type = "scatter", mode = "lines") %>%
add_hline(y = 0, line = list(color = "black", dash = "dash")) %>%
layout(title = 'Pesquisa Mensal de Serviços',
xaxis = list(title = ''),
yaxis = list(title = ''),
legend = list(orientation = "h")) %>%
subplot(facets = ~variavel, shareX = TRUE, shareY = TRUE)
library(plotly)
library(dplyr)
# Filtrar e preparar os dados
filtered_data <- tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10])
# Criar o gráfico dinâmico com Plotly
fig <- plot_ly() %>%
add_trace(data = filtered_data, x = ~date, y = ~valor, color = ~variavel, type = "scatter", mode = "lines") %>%
layout(title = 'Pesquisa Mensal de Serviços',
xaxis = list(title = ''),
yaxis = list(title = ''),
legend = list(orientation = "h"))
# Determinar os limites do eixo y
y_limits <- range(filtered_data$valor)
# Adicionar retas horizontais
for (variavel in unique(filtered_data$variavel)) {
fig <- fig %>%
add_trace(x = c(min(filtered_data$date), max(filtered_data$date)),
y = c(0, 0),
type = "scatter",
mode = "lines",
line = list(color = "black", dash = "dash"),
name = paste("Horizontal", variavel))
}
# Exibir o gráfico
fig
library(plotly)
library(dplyr)
# Filtrar e preparar os dados
filtered_data <- tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10])
# Criar o gráfico dinâmico com Plotly
fig <- plot_ly(filtered_data, x = ~date, y = ~valor, color = ~variavel, type = "scatter", mode = "lines") %>%
layout(title = 'Pesquisa Mensal de Serviços',
xaxis = list(title = ''),
yaxis = list(title = ''),
legend = list(orientation = "h")) %>%
subplot(facets = ~variavel, shareX = TRUE, shareY = TRUE)
library(plotly)
library(dplyr)
# Filtrar e preparar os dados
filtered_data <- tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10])
# Criar o gráfico dinâmico com Plotly
fig <- plot_ly(filtered_data, x = ~date, y = ~valor, color = ~variavel, type = "scatter", mode = "lines") %>%
layout(title = 'Pesquisa Mensal de Serviços',
xaxis = list(title = ''),
yaxis = list(title = ''),
legend = list(orientation = "h")) %>%
subplot(facets = ~variavel, shareX = TRUE, shareY = TRUE)
library(plotly)
library(dplyr)
# Filtrar e preparar os dados
filtered_data <- tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10])
# Criar uma lista vazia para armazenar os gráficos
plots <- list()
# Criar um gráfico para cada faceta
for (variavel in unique(filtered_data$variavel)) {
filtered_subset <- filtered_data %>%
filter(variavel == variavel)
p <- plot_ly(filtered_subset, x = ~date, y = ~valor, color = ~variavel, type = "scatter", mode = "lines") %>%
add_hline(y = 0, line = list(color = "black", dash = "dash")) %>%
layout(title = paste("Pesquisa Mensal de Serviços -", variavel),
xaxis = list(title = ''),
yaxis = list(title = ''),
legend = list(orientation = "h"))
plots[[variavel]] <- p
}
library(plotly)
library(dplyr)
# Filtrar e preparar os dados
filtered_data <- tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10])
# Criar o gráfico dinâmico com Plotly Express
fig <- plot_ly(filtered_data, x = ~date, y = ~valor, color = ~variavel, type = "scatter", mode = "lines") %>%
layout(title = 'Pesquisa Mensal de Serviços',
xaxis = list(title = ''),
yaxis = list(title = ''),
legend = list(orientation = "h"))
# Adicionar linhas horizontais para cada variável
for (variavel in unique(filtered_data$variavel)) {
fig <- fig %>%
add_trace(data = filtered_data %>% filter(variavel == variavel),
x = ~date, y = ~0,
type = "scatter", mode = "lines",
line = list(color = "black", dash = "dash"),
name = paste("Horizontal", variavel))
}
# Exibir o gráfico
fig
library(plotly)
library(dplyr)
# Filtrar e preparar os dados
filtered_data <- tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10])
# Criar o gráfico dinâmico com Plotly
fig <- plot_ly() %>%
add_trace(data = filtered_data, x = ~date, y = ~valor, color = ~variavel, type = "scatter", mode = "lines") %>%
layout(title = 'Pesquisa Mensal de Serviços',
xaxis = list(title = ''),
yaxis = list(title = ''),
legend = list(orientation = "h"))
# Determinar os limites do eixo y
y_limits <- range(filtered_data$valor)
# Adicionar retas horizontais
for (variavel in unique(filtered_data$variavel)) {
fig <- fig %>%
add_trace(x = c(min(filtered_data$date), max(filtered_data$date)),
y = c(0, 0),
type = "scatter",
mode = "lines",
line = list(color = "black", dash = "dash"),
name = paste("Horizontal", variavel))
}
# Exibir o gráfico
fig
library(plotly)
library(dplyr)
# Filtrar e preparar os dados
filtered_data <- tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10])
# Criar o gráfico dinâmico com Plotly
fig <- plot_ly() %>%
add_trace(data = filtered_data, x = ~date, y = ~valor, color = ~variavel, type = "scatter", mode = "lines") %>%
layout(title = 'Pesquisa Mensal de Serviços',
xaxis = list(title = ''),
yaxis = list(title = ''),
legend = list(orientation = "h"))
# Determinar os limites do eixo y
y_limits <- range(filtered_data$valor)
# Adicionar retas horizontais
for (variavel in unique(filtered_data$variavel)) {
fig <- fig %>%
add_trace(x = c(min(filtered_data$date), max(filtered_data$date)),
y = c(0, 0),
type = "scatter",
mode = "lines",
line = list(color = "black", dash = "dash"),
name = paste(variavel))
}
# Exibir o gráfico
fig
library(plotly)
library(dplyr)
# Filtrar e preparar os dados
filtered_data <- tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10])
# Criar o gráfico dinâmico com Plotly
fig <- plot_ly() %>%
add_trace(data = filtered_data, x = ~date, y = ~valor, color = ~variavel, type = "scatter", mode = "lines") %>%
layout(title = 'Pesquisa Mensal de Serviços',
xaxis = list(title = ''),
yaxis = list(title = ''),
legend = list(orientation = "h"))
# Determinar os limites do eixo y
y_limits <- range(filtered_data$valor)
# Adicionar retas horizontais
for (variavel in unique(filtered_data$variavel)) {
fig <- fig %>%
add_trace(x = c(min(filtered_data$date), max(filtered_data$date)),
y = c(0, 0),
type = "scatter",
mode = "lines",
line = list(color = "black", dash = "dash")
}
library(plotly)
library(dplyr)
# Filtrar e preparar os dados
filtered_data <- tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10])
# Criar o gráfico dinâmico com Plotly
fig <- plot_ly() %>%
add_trace(data = filtered_data, x = ~date, y = ~valor, color = ~variavel, type = "scatter", mode = "lines") %>%
layout(title = 'Pesquisa Mensal de Serviços',
xaxis = list(title = ''),
yaxis = list(title = ''),
legend = list(orientation = "h"))
# Determinar os limites do eixo y
y_limits <- range(filtered_data$valor)
# Adicionar retas horizontais
for (variavel in unique(filtered_data$variavel)) {
fig <- fig %>%
add_trace(x = c(min(filtered_data$date), max(filtered_data$date)),
y = c(0, 0),
type = "scatter",
mode = "lines",
line = list(color = "black", dash = "dash"),
name = paste(variavel))
}
# Exibir o gráfico
fig
tabpms_pe %>%
select(date, margem_receita, interanual_receita,
anual_receita) %>%
tail() %>%
kable(digits=2,
col.names = c('Data', 'Margem', 'Interanual', 'Anual'),
caption='Pesquisa Mensal de Serviços: Variações da Receita PE')
tabpms_pe %>%
select(date, margem_volume, interanual_volume,
anual_volume) %>%
tail() %>%
kable(digits=2,
col.names = c('Data', 'Margem', 'Interanual', 'Anual'),
caption='Pesquisa Mensal de Serviços: Variações do Volume PE')
tabpms_long %>%
filter(variavel %in% unique(tabpms_long$variavel)[5:10]) %>%
ggplot(aes(x=date, y=valor, colour=variavel))+
geom_line(size=.8)+
geom_hline(yintercept=0, colour='black', linetype='dashed')+
facet_wrap(~variavel, scales='free')+
theme_minimal()+
theme(legend.position = 'none')+
labs(x='', y='',
title='Pesquisa Mensal de Serviços Pernambuco',
caption= foot_ibge)
